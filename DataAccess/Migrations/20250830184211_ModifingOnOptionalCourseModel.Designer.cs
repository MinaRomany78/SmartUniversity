// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250830184211_ModifingOnOptionalCourseModel")]
    partial class ModifingOnOptionalCourseModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GenerateEmail")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Entities.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "inst-user-100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fe706ed-1c4e-4624-9f8d-6021a943f923",
                            Email = "ahmed@test.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmed",
                            FullName = "Ahmed Kamal",
                            LastName = "Kamal",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMED@TEST.COM",
                            NormalizedUserName = "AHMED@TEST.COM",
                            PasswordHash = "FAKE_HASH",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cc03944-38d0-4ff8-aaf2-38ab40dab695",
                            TwoFactorEnabled = false,
                            UserName = "ahmed@test.com"
                        },
                        new
                        {
                            Id = "inst-user-101",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6291d7c5-1d97-4f30-a79f-c157239017dc",
                            Email = "mona@test.com",
                            EmailConfirmed = true,
                            FirstName = "Mona",
                            FullName = "Mona Ali",
                            LastName = "Ali",
                            LockoutEnabled = false,
                            NormalizedEmail = "MONA@TEST.COM",
                            NormalizedUserName = "MONA@TEST.COM",
                            PasswordHash = "FAKE_HASH",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7e29e5e-79b2-48ab-a456-bf3572a07b5a",
                            TwoFactorEnabled = false,
                            UserName = "mona@test.com"
                        },
                        new
                        {
                            Id = "inst-user-102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a61c663-3292-4499-99c6-23b61c512baf",
                            Email = "hossam@test.com",
                            EmailConfirmed = true,
                            FirstName = "Hossam",
                            FullName = "Hossam Yehia",
                            LastName = "Yehia",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOSSAM@TEST.COM",
                            NormalizedUserName = "HOSSAM@TEST.COM",
                            PasswordHash = "FAKE_HASH",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bb5a100-a633-40ff-b409-0acd9e29370b",
                            TwoFactorEnabled = false,
                            UserName = "hossam@test.com"
                        },
                        new
                        {
                            Id = "inst-user-103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6a19369-a2c8-433e-8482-f4e3c74d0b0b",
                            Email = "sara@test.com",
                            EmailConfirmed = true,
                            FirstName = "Sara",
                            FullName = "Sara Ibrahim",
                            LastName = "Ibrahim",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA@TEST.COM",
                            NormalizedUserName = "SARA@TEST.COM",
                            PasswordHash = "FAKE_HASH",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49ed3a6a-b33d-4183-9d34-a9669c6b7fe5",
                            TwoFactorEnabled = false,
                            UserName = "sara@test.com"
                        },
                        new
                        {
                            Id = "inst-user-104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a4c5746-c966-431c-b8d0-689b2895a995",
                            Email = "khaled@test.com",
                            EmailConfirmed = true,
                            FirstName = "Khaled",
                            FullName = "Khaled Mostafa",
                            LastName = "Mostafa",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHALED@TEST.COM",
                            NormalizedUserName = "KHALED@TEST.COM",
                            PasswordHash = "FAKE_HASH",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2d6323c-7787-4151-81c0-1d77fc32de42",
                            TwoFactorEnabled = false,
                            UserName = "khaled@test.com"
                        });
                });

            modelBuilder.Entity("Entities.Models.ApplicationUserOtp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserOtps");
                });

            modelBuilder.Entity("Entities.Models.Assistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("Entities.Models.AssistantCourse", b =>
                {
                    b.Property<int>("AssistantId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("AssistantId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("AssistantCourses");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssistantId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostID");

                    b.HasIndex("StudentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Models.CommunityPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentId");

                    b.ToTable("CommunityPosts");
                });

            modelBuilder.Entity("Entities.Models.CourseReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Information Systems"
                        });
                });

            modelBuilder.Entity("Entities.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Entities.Models.DoctorAssistant", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("AssistantId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "AssistantId", "CourseId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CourseId");

                    b.ToTable("DoctorAssistants");
                });

            modelBuilder.Entity("Entities.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityCourseID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentID");

                    b.HasIndex("UniversityCourseID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Entities.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssistantID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReplyFromStudent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TaskID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssistantID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TaskID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            ApplicationUserId = "inst-user-100"
                        },
                        new
                        {
                            Id = 101,
                            ApplicationUserId = "inst-user-101"
                        },
                        new
                        {
                            Id = 102,
                            ApplicationUserId = "inst-user-102"
                        },
                        new
                        {
                            Id = 103,
                            ApplicationUserId = "inst-user-103"
                        },
                        new
                        {
                            Id = 104,
                            ApplicationUserId = "inst-user-104"
                        });
                });

            modelBuilder.Entity("Entities.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MaterialLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityCourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UniversityCourseID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Entities.Models.OptionalCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailableForUniversityStudents")
                        .HasColumnType("bit");

                    b.Property<string>("MainImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Traffic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("PromoCode");

                    b.ToTable("OptionalCourses");

                    b.HasData(
                        new
                        {
                            Id = 300,
                            Description = "Intro to C# and .NET",
                            InstructorId = 101,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "csharp.png",
                            Name = "C# Basics",
                            Price = 800m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 301,
                            Description = "Learn EF Core ORM",
                            InstructorId = 101,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "efcore.png",
                            Name = "Entity Framework Core",
                            Price = 1200m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 302,
                            Description = "Frontend development with React",
                            InstructorId = 102,
                            IsAvailableForUniversityStudents = false,
                            MainImg = "react.png",
                            Name = "React Fundamentals",
                            Price = 1500m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 303,
                            Description = "Learn Angular fast",
                            InstructorId = 102,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "angular.png",
                            Name = "Angular Crash Course",
                            Price = 1400m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 304,
                            Description = "Pandas, NumPy, and basics of ML",
                            InstructorId = 103,
                            IsAvailableForUniversityStudents = false,
                            MainImg = "python.png",
                            Name = "Python for Data Science",
                            Price = 1600m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 305,
                            Description = "Intro to ML concepts",
                            InstructorId = 103,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "ml.png",
                            Name = "Machine Learning 101",
                            Price = 2000m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 306,
                            Description = "Wireframes & Prototyping",
                            InstructorId = 104,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "uiux.png",
                            Name = "UI/UX Advanced",
                            Price = 1300m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 307,
                            Description = "Cross-platform apps",
                            InstructorId = 104,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "flutter.png",
                            Name = "Mobile Development with Flutter",
                            Price = 1800m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 308,
                            Description = "Security principles and practices",
                            InstructorId = 100,
                            IsAvailableForUniversityStudents = false,
                            MainImg = "cyber.png",
                            Name = "Cybersecurity Basics",
                            Price = 2200m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        },
                        new
                        {
                            Id = 309,
                            Description = "Azure fundamentals",
                            InstructorId = 100,
                            IsAvailableForUniversityStudents = true,
                            MainImg = "azure.png",
                            Name = "Cloud with Azure",
                            Price = 2100m,
                            PromoCode = "PROMO10",
                            Traffic = 0
                        });
                });

            modelBuilder.Entity("Entities.Models.PromoCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsForUniversityStudentsOnly")
                        .HasColumnType("bit");

                    b.HasKey("Code");

                    b.ToTable("PromoCodes");

                    b.HasData(
                        new
                        {
                            Code = "PROMO10",
                            DiscountPercent = 10m,
                            IsForUniversityStudentsOnly = false
                        },
                        new
                        {
                            Code = "STUDENT20",
                            DiscountPercent = 20m,
                            IsForUniversityStudentsOnly = true
                        });
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsUniversityStudent")
                        .HasColumnType("bit");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PromoCode");

                    b.HasIndex("TermId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Entities.Models.SubjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniversityCourseID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UniversityCourseID");

                    b.ToTable("SubjectTasks");
                });

            modelBuilder.Entity("Entities.Models.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Entities.Models.TaskSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentID");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskSubmissions");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TermNumber")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TermNumber = 1,
                            Year = 1
                        },
                        new
                        {
                            Id = 2,
                            TermNumber = 2,
                            Year = 1
                        },
                        new
                        {
                            Id = 3,
                            TermNumber = 1,
                            Year = 2
                        },
                        new
                        {
                            Id = 4,
                            TermNumber = 2,
                            Year = 2
                        },
                        new
                        {
                            Id = 5,
                            TermNumber = 1,
                            Year = 3
                        },
                        new
                        {
                            Id = 6,
                            TermNumber = 2,
                            Year = 3
                        },
                        new
                        {
                            Id = 7,
                            TermNumber = 1,
                            Year = 4
                        },
                        new
                        {
                            Id = 8,
                            TermNumber = 2,
                            Year = 4
                        });
                });

            modelBuilder.Entity("Entities.Models.UniversityCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("TermId");

                    b.ToTable("UniversityCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Mathematics 1",
                            TermId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Programming Basics",
                            TermId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Physics 1",
                            TermId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "English 1",
                            TermId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Introduction to IT",
                            TermId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Critical Thinking",
                            TermId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Mathematics 2",
                            TermId = 2
                        },
                        new
                        {
                            Id = 8,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Object Oriented Programming",
                            TermId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Physics 2",
                            TermId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "English 2",
                            TermId = 2
                        },
                        new
                        {
                            Id = 11,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Introduction to Database",
                            TermId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Communication Skills",
                            TermId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Mathematics 3",
                            TermId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Data Structures",
                            TermId = 3
                        },
                        new
                        {
                            Id = 15,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Computer Organization",
                            TermId = 3
                        },
                        new
                        {
                            Id = 16,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Probability & Statistics",
                            TermId = 3
                        },
                        new
                        {
                            Id = 17,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Operating Systems Basics",
                            TermId = 3
                        },
                        new
                        {
                            Id = 18,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Ethics",
                            TermId = 3
                        },
                        new
                        {
                            Id = 19,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Mathematics 4",
                            TermId = 4
                        },
                        new
                        {
                            Id = 20,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Algorithms",
                            TermId = 4
                        },
                        new
                        {
                            Id = 21,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Digital Logic",
                            TermId = 4
                        },
                        new
                        {
                            Id = 22,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Software Engineering Basics",
                            TermId = 4
                        },
                        new
                        {
                            Id = 23,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Database Systems",
                            TermId = 4
                        },
                        new
                        {
                            Id = 24,
                            CreditHours = 3,
                            DepartmentID = 1,
                            Description = "",
                            Name = "Technical Writing",
                            TermId = 4
                        },
                        new
                        {
                            Id = 25,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Advanced Algorithms",
                            TermId = 5
                        },
                        new
                        {
                            Id = 26,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Theory of Computation",
                            TermId = 5
                        },
                        new
                        {
                            Id = 27,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Operating Systems",
                            TermId = 5
                        },
                        new
                        {
                            Id = 28,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Computer Networks",
                            TermId = 5
                        },
                        new
                        {
                            Id = 29,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Artificial Intelligence",
                            TermId = 5
                        },
                        new
                        {
                            Id = 30,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Compiler Design",
                            TermId = 5
                        },
                        new
                        {
                            Id = 31,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Information Systems Analysis",
                            TermId = 5
                        },
                        new
                        {
                            Id = 32,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Business Process Management",
                            TermId = 5
                        },
                        new
                        {
                            Id = 33,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Database Administration",
                            TermId = 5
                        },
                        new
                        {
                            Id = 34,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Enterprise Systems",
                            TermId = 5
                        },
                        new
                        {
                            Id = 35,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Systems Security",
                            TermId = 5
                        },
                        new
                        {
                            Id = 36,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Decision Support Systems",
                            TermId = 5
                        },
                        new
                        {
                            Id = 37,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Parallel Computing",
                            TermId = 6
                        },
                        new
                        {
                            Id = 38,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Advanced Computer Networks",
                            TermId = 6
                        },
                        new
                        {
                            Id = 39,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Machine Learning",
                            TermId = 6
                        },
                        new
                        {
                            Id = 40,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Database Systems Advanced",
                            TermId = 6
                        },
                        new
                        {
                            Id = 41,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Web Technologies",
                            TermId = 6
                        },
                        new
                        {
                            Id = 42,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Human Computer Interaction",
                            TermId = 6
                        },
                        new
                        {
                            Id = 43,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "E-Business Systems",
                            TermId = 6
                        },
                        new
                        {
                            Id = 44,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Knowledge Management",
                            TermId = 6
                        },
                        new
                        {
                            Id = 45,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Advanced Systems Security",
                            TermId = 6
                        },
                        new
                        {
                            Id = 46,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Big Data Analytics",
                            TermId = 6
                        },
                        new
                        {
                            Id = 47,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Cloud Computing",
                            TermId = 6
                        },
                        new
                        {
                            Id = 48,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "IT Project Management",
                            TermId = 6
                        },
                        new
                        {
                            Id = 49,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Computer Graphics",
                            TermId = 7
                        },
                        new
                        {
                            Id = 50,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Cyber Security",
                            TermId = 7
                        },
                        new
                        {
                            Id = 51,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Natural Language Processing",
                            TermId = 7
                        },
                        new
                        {
                            Id = 52,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Advanced Artificial Intelligence",
                            TermId = 7
                        },
                        new
                        {
                            Id = 53,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Software Engineering Advanced",
                            TermId = 7
                        },
                        new
                        {
                            Id = 54,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Data Mining",
                            TermId = 7
                        },
                        new
                        {
                            Id = 55,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Enterprise Resource Planning",
                            TermId = 7
                        },
                        new
                        {
                            Id = 56,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Advanced Decision Support",
                            TermId = 7
                        },
                        new
                        {
                            Id = 57,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Business Intelligence",
                            TermId = 7
                        },
                        new
                        {
                            Id = 58,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Information Systems Strategy",
                            TermId = 7
                        },
                        new
                        {
                            Id = 59,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Cybersecurity for IS",
                            TermId = 7
                        },
                        new
                        {
                            Id = 60,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Mobile Systems",
                            TermId = 7
                        },
                        new
                        {
                            Id = 61,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Advanced Computer Vision",
                            TermId = 8
                        },
                        new
                        {
                            Id = 62,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Robotics",
                            TermId = 8
                        },
                        new
                        {
                            Id = 63,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Cloud Native Applications",
                            TermId = 8
                        },
                        new
                        {
                            Id = 64,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Capstone Project (CS)",
                            TermId = 8
                        },
                        new
                        {
                            Id = 65,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Advanced Data Mining",
                            TermId = 8
                        },
                        new
                        {
                            Id = 66,
                            CreditHours = 3,
                            DepartmentID = 2,
                            Description = "",
                            Name = "Ethical Hacking",
                            TermId = 8
                        },
                        new
                        {
                            Id = 67,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Digital Transformation",
                            TermId = 8
                        },
                        new
                        {
                            Id = 68,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Information Governance",
                            TermId = 8
                        },
                        new
                        {
                            Id = 69,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Enterprise Architecture",
                            TermId = 8
                        },
                        new
                        {
                            Id = 70,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Capstone Project (IS)",
                            TermId = 8
                        },
                        new
                        {
                            Id = 71,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "Advanced Business Intelligence",
                            TermId = 8
                        },
                        new
                        {
                            Id = 72,
                            CreditHours = 3,
                            DepartmentID = 3,
                            Description = "",
                            Name = "IT Governance & Compliance",
                            TermId = 8
                        });
                });

            modelBuilder.Entity("Entities.Models.UserOptionalCourse", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OptionalCourseId")
                        .HasColumnType("int");

                    b.Property<string>("AppliedPromoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppliedPromoCodeEntityCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicationUserId", "OptionalCourseId");

                    b.HasIndex("AppliedPromoCodeEntityCode");

                    b.HasIndex("OptionalCourseId");

                    b.ToTable("UserOptionalCourses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ApplicationUserOtp", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Entities.Models.Assistant", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Assistant")
                        .HasForeignKey("Entities.Models.Assistant", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Entities.Models.AssistantCourse", b =>
                {
                    b.HasOne("Entities.Models.Assistant", "Assistant")
                        .WithMany("AssistantCourses")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UniversityCourse", "Course")
                        .WithMany("AssistantCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Assistant", null)
                        .WithMany("Comments")
                        .HasForeignKey("AssistantId");

                    b.HasOne("Entities.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.CommunityPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", null)
                        .WithMany("Comments")
                        .HasForeignKey("StudentId");

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Entities.Models.CommunityPost", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.UniversityCourse", "UniversityCourse")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", null)
                        .WithMany("CommunityPosts")
                        .HasForeignKey("StudentId");

                    b.Navigation("Author");

                    b.Navigation("UniversityCourse");
                });

            modelBuilder.Entity("Entities.Models.CourseReview", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.OptionalCourse", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entities.Models.Doctor", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Doctor")
                        .HasForeignKey("Entities.Models.Doctor", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Entities.Models.DoctorAssistant", b =>
                {
                    b.HasOne("Entities.Models.Assistant", "Assistant")
                        .WithMany("DoctorAssistants")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UniversityCourse", "Course")
                        .WithMany("DoctorAssistants")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Doctor", "Doctor")
                        .WithMany("DoctorAssistants")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Course");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Entities.Models.Enrollment", b =>
                {
                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UniversityCourse", "UniversityCourse")
                        .WithMany("Enrollments")
                        .HasForeignKey("UniversityCourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("UniversityCourse");
                });

            modelBuilder.Entity("Entities.Models.Feedback", b =>
                {
                    b.HasOne("Entities.Models.Assistant", "Assistant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AssistantID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.SubjectTask", "Task")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Entities.Models.Instructor", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Instructor")
                        .HasForeignKey("Entities.Models.Instructor", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Entities.Models.Material", b =>
                {
                    b.HasOne("Entities.Models.UniversityCourse", "UniversityCourse")
                        .WithMany("Materials")
                        .HasForeignKey("UniversityCourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UniversityCourse");
                });

            modelBuilder.Entity("Entities.Models.OptionalCourse", b =>
                {
                    b.HasOne("Entities.Models.Instructor", "Instructor")
                        .WithMany("OptionalCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.PromoCode", "PromoCodeEntity")
                        .WithMany("OptionalCourses")
                        .HasForeignKey("PromoCode");

                    b.Navigation("Instructor");

                    b.Navigation("PromoCodeEntity");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("Entities.Models.Student", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.PromoCode", "PromoCodeEntity")
                        .WithMany("Students")
                        .HasForeignKey("PromoCode");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("Students")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");

                    b.Navigation("PromoCodeEntity");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Entities.Models.SubjectTask", b =>
                {
                    b.HasOne("Entities.Models.Doctor", "Doctor")
                        .WithMany("Tasks")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UniversityCourse", "UniversityCourse")
                        .WithMany("Tasks")
                        .HasForeignKey("UniversityCourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("UniversityCourse");
                });

            modelBuilder.Entity("Entities.Models.TaskSubmission", b =>
                {
                    b.HasOne("Entities.Models.Student", "Student")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.SubjectTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Entities.Models.UniversityCourse", b =>
                {
                    b.HasOne("Entities.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Doctor", "Doctor")
                        .WithMany("UniversityCourses")
                        .HasForeignKey("DoctorID");

                    b.HasOne("Entities.Models.Term", "Term")
                        .WithMany("Courses")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Entities.Models.UserOptionalCourse", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.PromoCode", "AppliedPromoCodeEntity")
                        .WithMany()
                        .HasForeignKey("AppliedPromoCodeEntityCode");

                    b.HasOne("Entities.Models.OptionalCourse", "OptionalCourse")
                        .WithMany()
                        .HasForeignKey("OptionalCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("AppliedPromoCodeEntity");

                    b.Navigation("OptionalCourse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.ApplicationUser", b =>
                {
                    b.Navigation("Assistant");

                    b.Navigation("Doctor");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Entities.Models.Assistant", b =>
                {
                    b.Navigation("AssistantCourses");

                    b.Navigation("Comments");

                    b.Navigation("DoctorAssistants");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.CommunityPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Entities.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Models.Doctor", b =>
                {
                    b.Navigation("DoctorAssistants");

                    b.Navigation("Tasks");

                    b.Navigation("UniversityCourses");
                });

            modelBuilder.Entity("Entities.Models.Instructor", b =>
                {
                    b.Navigation("OptionalCourses");
                });

            modelBuilder.Entity("Entities.Models.OptionalCourse", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Entities.Models.PromoCode", b =>
                {
                    b.Navigation("OptionalCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Models.Student", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CommunityPosts");

                    b.Navigation("Enrollments");

                    b.Navigation("Feedbacks");

                    b.Navigation("TaskSubmissions");
                });

            modelBuilder.Entity("Entities.Models.SubjectTask", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Entities.Models.Term", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Entities.Models.UniversityCourse", b =>
                {
                    b.Navigation("AssistantCourses");

                    b.Navigation("DoctorAssistants");

                    b.Navigation("Enrollments");

                    b.Navigation("Materials");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
